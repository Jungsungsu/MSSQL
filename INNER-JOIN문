-- 조인 : 두 개 이상의 테이블을 서로 묶어서 하나의 결과 집합으로 만들어 내는 것을 말한다.
-- 데이터베이스의 테이블은 데이터의 무결성을 위해서 여러 개의 테이블로 분리하여 저장한다.

-- INNER JOIN(내부 조인) : 가장 많이 사용되는 조인으로 대개의 업무에서 사용된다. 회원의 주소 정보를 알기 위해 주소 정보가 있는 회원 테이블과 결합하는 방법
-- 구매 테이블에 있는 유저 아이디와 유저테이블의 유저 아이디가 JYP인 아이디를 결합하기
USE sqlDB;
SELECT * 
	FROM buyTbl
		INNER JOIN userTbl
			ON buyTbl.userid = userTbl.userid
	WHERE buyTbl.userid = 'JYP';

-- 열의 항목이 너무 많아서 복잡하니 아이디/이름/구매물품/주소/연락처만 추출하기
SELECT buyTbl.userid, name, prodName, addr, mobile1 + mobile2 AS [연락처]
	FROM buyTbl
		INNER JOIN userTbl
			ON buyTbl.userid = userTbl.userid;

-- SELECT 다음의 컬럼 이름(열 이름)에도 모두 '테이블이름.열이름'식으로 붙여주기
SELECT buyTbl.userid, userTbl.name, buyTbl.prodName, userTbl.addr,
			userTbl.mobile1 + userTbl.mobile2 AS [연락처]
	FROM buyTbl
		INNER JOIN userTbl	
			ON buyTbl.userid = userTbl.userid;

-- 코드가 길어지면 복잡하기 때문에, 각 테이블에 별칭을 붙여 간편하게 할 수 있다.(Alias 사용)
SELECT B.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처]
	FROM buyTbl B
		INNER JOIN userTbl U
			ON B.userid = U.userid
	WHERE B.userid = 'JYP';

-- 회원 테이블을 기준으로 아이디가 JYP인 사용자가 구매한 물건의 목록을 알아보기
SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처]
	FROM userTbl U
		INNER JOIN buyTbl B
			ON U.userid = B.userid
	WHERE B.userid = 'JYP';

-- WHERE 조건만 빼서 전체 회원이 구매한 목록을 모두 출력해보고 결과를 보기 쉽게 회원ID 순으로 정렬하기
SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처]
	FROM userTbl U
		INNER JOIN buyTbl B
			ON U.userid = B.userid
	ORDER BY U.userid;

-- 쇼핑몰에서 한 번 이라도 구매한 기록이 있는 우수회원들에게 감사의 안내문을 발송하도록 하자 (DISTINCT문 활용해 회원의 주소록 뽑기)
SELECT DISTINCT U.userid, U.name, U.addr
	FROM userTbl U
		INNER JOIN buyTbl B
			ON U.userid = B.userid
	ORDER BY U.userid;

-- 쇼핑몰에서 한 번 이라도 구매한 기록이 있는 우수회원들에게 감사의 안내문을 발송하도록 하자 (EXISTS문 활용해 회원의 주소록 뽑기)
SELECT U.userid, U.name, U.addr
	FROM userTbl U
	WHERE EXISTS (
		SELECT *
		FROM buyTbl B
		WHERE U.userid = B.userid );

USE sqlDB;
CREATE TABLE stdTbl
(	stdName	NVARCHAR(10) NOT NULL PRIMARY KEY,
	addr	NCHAR(4) NOT NULL
);
GO
CREATE TABLE clubTbl
(	clubName	NVARCHAR(10) NOT NULL PRIMARY KEY,
	roomNo	NCHAR(4) NOT NULL
);
GO
CREATE TABLE stdclubTbl
(	num int IDENTITY NOT NULL PRIMARY KEY,
	stdName	NVARCHAR(10) NOT NULL
		FOREIGN KEY REFERENCES stdTbl(stdName),
	clubName	NVARCHAR(10) NOT NULL
		FOREIGN KEY REFERENCES clubTbl(clubName),
);
GO
SELECT * FROM STDTBL
INSERT INTO stdTbl VALUES ('김범수','경남')
INSERT INTO stdTbl VALUES('성시경','서울')
INSERT INTO stdTbl VALUES('조용필','경기')
INSERT INTO stdTbl VALUES('은지원','경북')
INSERT INTO stdTbl VALUES('바비킴','서울')


INSERT INTO clubTbl VALUES ('수영','101호')
INSERT INTO clubTbl VALUES('바둑','102호')
INSERT INTO clubTbl VALUES('축구', '103호')
INSERT INTO clubTbl VALUES('봉사','104호')

INSERT INTO stdclubTbl VALUES ('김범수','바둑')
INSERT INTO stdclubTbl VALUES('김범수','축구')
INSERT INTO stdclubTbl VALUES('조용필','축구')
INSERT INTO stdclubTbl VALUES('은지원','축구')
INSERT INTO stdclubTbl VALUES('은지원','봉사')
INSERT INTO stdclubTbl VALUES('바비킴', '봉사')
GO			

-- 학생이름, 주소, 동아리, 방번호 조회 (INNER JOIN 활용)
SELECT S.stdName, S.addr, C.clubName, C.roomNo
	FROM stdTbl S
		INNER JOIN stdclubTbl SC
			ON S.stdName = SC.stdName
		INNER JOIN clubTbl C
		ON SC.clubName = C.clubName
	ORDER BY S.stdName;

-- 동아리를 기준으로 조회 (INNER JOIN 활용)
SELECT C.clubName, C.roomNo, S.stdName, S.addr
	FROM stdTbl S
		INNER JOIN stdclubTbl SC
			ON SC.stdName = S.stdName
		INNER JOIN clubTbl C
			ON SC.clubName = C.clubName
	ORDER BY C.clubName;
