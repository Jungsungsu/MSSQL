-- SQL 프로그래밍

-- AdventureWorks DB의 HumanResources.Employee 테이블 사용해 열에는 입사일 열이 있는데, 직원번호 111에 해당하는 직원의 입사일이 5년이 넘었는지를 확인해보기
USE AdventureWorks

DECLARE @hireDATE SMALLDATETIME -- 입사일
DECLARE @curDATE SMALLDATETIME -- 오늘
DECLARE @years DECIMAL(5,2) -- 근무한 년수
DECLARE @days INT -- 근무한 일수

SELECT @hireDATE = HireDATE -- HireDATE 열의 결과를 @hireDATE에 대입
	FROM HumanResources.Employee
	WHERE BusinessEntityID = 111

SET @curDATE = GETDATE() -- 현재 날짜
SET @years = DATEDIFF(year, @hireDATE, @curDATE) -- 날짜의 차이, 년 단위
SET @days = DATEDIFF(day, @hireDATE, @curDATE) -- 날짜의 차이, 일 단위

IF ( @years >= 5 )
	BEGIN
		PRINT N'입사한 지' + CAST(@days AS NCHAR(5)) + N'일이나 지났습니다.'
		PRINT N'축하합니다'
	END
ELSE
	BEGIN
		PRINT N'입사한 지' + CAST(@days AS NCHAR(5)) + N'일밖에 안 되었네요.'
		PRINT N'열심히 일하세요.'
	END

-- IF문을 활용해 취득점수 + 학점 조회
DECLARE @point INT = 77, @credit NCHAR(1)

IF @point >= 90
	SET @credit = 'A'
ELSE
	IF @point >= 80
		SET @credit = 'B'
	ELSE
		IF @point >= 70
			SET @credit = 'C'
		ELSE
			IF @point >= 60
				SET @credit = 'D'
			ELSE
				SET @credit = 'F'
PRINT N'취득점수==> ' + CAST(@point AS NCHAR(3))
PRINT N'학점==> ' + @credit

-- CASE문을 활용해 취득점수 + 학점 조회
DECLARE @point INT = 77, @credit NCHAR(1)

SET @credit =
	CASE
		WHEN (@point >= 90) THEN 'A'
		WHEN (@point >= 80) THEN 'B'
		WHEN (@point >= 70) THEN 'C'
		WHEN (@point >= 60) THEN 'D'
		ELSE 'F'
	END

PRINT N'취득점수==> ' + CAST(@point AS NCHAR(3))
PRINT N'학점==> ' + @credit

-- CASE문을 활용해 SQL 프로그래밍 작성 ( sqlDB의 구매 테이블(buyTbl)에 구매액(price * amount)이 1500원 이상인 고객은 '최우수 고객', 1000원 이상인 고객은 '우수 고객', 1원 이상인 고객은 '일반고객'으로 출력하자, 또, 전혀 구매 실적이 없는 고객은'유령고객'이라고 출력하기
-- Step0. 백업해 놓은 것 복원시키기
USE tempdb;
RESTORE DATABASE sqlDB FROM DISK = 'C:\SQL\sqlDB2016.bak' WITH REPLACE;
-- Step1. buyTbl에서 구매액을 사용자 아이디 별로 묶고, 구매액이 높은순으로 정렬한다.
USE sqlDB;
SELECT userid, SUM(price*amount) AS [총구매액]
	FROM buyTbl
	GROUP BY userid
	ORDER BY SUM(price*amount) DESC;
-- Step2. 사용자 이름이 빠졌으므로, userTbl과 조인해서 사용자 이름도 출력하기
SELECT B.userid, U.name, SUM(price*amount) AS [총구매액]
	FROM buyTbl B
		INNER JOIN userTbl U
			ON B.userid = U.userid
	GROUP BY B.userid, U.name
	ORDER BY SUM(price*amount) DESC;
-- Step3. buyTbl에서 구매한 고객의 명단만 나왔을 뿐, 구매하지 않은 고객의 명단은 나오지 않았다. 오른쪽 테이블(userTbl)의 내용이 없더라도 나오게 하기 위해 RIGHT OUTER JOIN으로 변경하기
SELECT B.userid, U.name, SUM(price*amount) AS [총구매액]
	FROM buyTbl B
		RIGHT OUTER JOIN userTbl U
			ON B.userid = U.userid
	GROUP BY B.userid, U.name
	ORDER BY SUM(price*amount) DESC;
-- Step4. userid의 기준을 buyTbl에서 userTbl로 변경하기
SELECT U.userid, U.name, SUM(price*amount) AS [총구매액]
	FROM buyTbl B
		RIGHT OUTER JOIN userTbl U
			ON B.userid = U.userid
	GROUP BY U.userid, U.name
	ORDER BY SUM(price*amount) DESC
-- Step5. 총구매엑에 따른 고객 분류를 처음에 제시했던 대로 CASE 문만 따로 고려해보자
CASE
	WHEN ( 총구매액 >= 1500) THEN N'최우수 고객'
	WHEN ( 총구매액 >= 1000) THEN N'우수 고객'
	WHEN ( 총구매액 >= 1) THEN N'일반 고객'
	ELSE N'유령고객'
END
-- Step6. 작성한 CASE 구문을 SELECT에 추가한다.
SELECT U.userid, U.name, SUM(price*amount) AS [총구매액],
	CASE
		WHEN (SUM(price*amount) >= 1500) THEN N'최우수고객'
		WHEN (SUM(price*amount) >= 1000) THEN N'우수고객'
		WHEN (SUM(price*amount) >= 1) THEN N'일반고객'
		ELSE N'유령고객'
	END AS [고객등급]
FROM buyTbl B
	RIGHT OUTER JOIN userTbl U
		ON B.userid = U.userid
GROUP BY U.userid, U.name
ORDER BY sum(price*amount) DESC;
